// Factory pattern para gerenciar inst√¢ncias de servi√ßos de dados
import { DATABASE_CONFIG, validateDatabaseConfig } from '@/config/database.config';
import { IDataService } from './interfaces/IDataService';
import { MockDataServiceAdapter } from './adapters/MockDataServiceAdapter';
import { SupabaseDataService } from './adapters/SupabaseDataService';

let serviceInstance: IDataService | null = null;

export class DataServiceFactory {
  static getInstance(): IDataService {
    if (!serviceInstance) {
      validateDatabaseConfig();
      
      if (DATABASE_CONFIG.USE_MOCK_DATA) {
        if (DATABASE_CONFIG.ENABLE_LOGGING) {
          console.log('üîß Inicializando MockDataService (desenvolvimento)');
        }
        serviceInstance = new MockDataServiceAdapter();
      } else {
        if (DATABASE_CONFIG.ENABLE_LOGGING) {
          console.log('üöÄ Inicializando SupabaseDataService (produ√ß√£o)');
        }
        serviceInstance = new SupabaseDataService();
      }
    }
    
    return serviceInstance;
  }
  
  // M√©todo para for√ßar recria√ß√£o (√∫til para testes ou troca de configura√ß√£o)
  static reset(): void {
    serviceInstance = null;
    if (DATABASE_CONFIG.ENABLE_LOGGING) {
      console.log('üîÑ Factory resetado - pr√≥xima chamada criar√° nova inst√¢ncia');
    }
  }
  
  // M√©todo para verificar qual servi√ßo est√° ativo
  static getActiveService(): 'mock' | 'supabase' {
    return DATABASE_CONFIG.USE_MOCK_DATA ? 'mock' : 'supabase';
  }

  // M√©todo para verificar se est√° em modo de desenvolvimento
  static isDevelopment(): boolean {
    return DATABASE_CONFIG.USE_MOCK_DATA;
  }

  // M√©todo para logging de debug
  static logStatus(): void {
    console.log('üîç Status do DataServiceFactory:', {
      activeService: DataServiceFactory.getActiveService(),
      isDevelopment: DataServiceFactory.isDevelopment(),
      hasInstance: !!serviceInstance,
      config: {
        useMock: DATABASE_CONFIG.USE_MOCK_DATA,
        hasSupabaseUrl: !!DATABASE_CONFIG.SUPABASE_URL,
        loggingEnabled: DATABASE_CONFIG.ENABLE_LOGGING
      }
    });
  }
}

// Export conveniente para uso direto
export const dataService = DataServiceFactory.getInstance();