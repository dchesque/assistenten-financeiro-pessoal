import { useState, useEffect } from 'react';
import { Wifi, WifiOff, CloudOff, Cloud } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

/**
 * Hook para detectar status de conex√£o online/offline
 * Inclui funcionalidades premium como cache offline e sincroniza√ß√£o
 */
export function useOffline() {
  const [isOnline, setIsOnline] = useState<boolean>(navigator.onLine);
  const [reconnecting, setReconnecting] = useState<boolean>(false);
  const [lastOfflineTime, setLastOfflineTime] = useState<Date | null>(null);
  const [offlineActions, setOfflineActions] = useState<any[]>([]);

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      setReconnecting(false);
      
      if (lastOfflineTime) {
        const offlineTime = Math.round((Date.now() - lastOfflineTime.getTime()) / 1000);
        toast({
          title: "üåê Conex√£o restaurada",
          description: `Voc√™ esteve offline por ${offlineTime}s. Sincronizando dados...`,
        });
        
        // Executar a√ß√µes offline pendentes
        if (offlineActions.length > 0) {
          syncOfflineActions();
        }
      }
      
      setLastOfflineTime(null);
    };

    const handleOffline = () => {
      setIsOnline(false);
      setLastOfflineTime(new Date());
      
      toast({
        title: "üìµ Sem conex√£o",
        description: "Voc√™ est√° offline. As a√ß√µes ser√£o sincronizadas quando a conex√£o retornar.",
        variant: "destructive"
      });
    };

    // Tentativa de reconex√£o
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible' && !isOnline) {
        setReconnecting(true);
        // Simular teste de conectividade
        setTimeout(() => {
          if (navigator.onLine) {
            handleOnline();
          } else {
            setReconnecting(false);
          }
        }, 2000);
      }
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [isOnline, lastOfflineTime, offlineActions]);

  // Fun√ß√£o para adicionar a√ß√£o offline √† fila
  const addOfflineAction = (action: any) => {
    setOfflineActions(prev => [...prev, {
      ...action,
      timestamp: Date.now(),
      id: Math.random().toString(36).substr(2, 9)
    }]);
  };

  // Sincronizar a√ß√µes offline
  const syncOfflineActions = async () => {
    if (offlineActions.length === 0) return;
    
    toast({
      title: "üîÑ Sincronizando",
      description: `Executando ${offlineActions.length} a√ß√µes pendentes...`,
    });

    try {
      // Simular sincroniza√ß√£o das a√ß√µes
      for (const action of offlineActions) {
        // Executar cada a√ß√£o
        await action.execute();
      }
      
      setOfflineActions([]);
      
      toast({
        title: "‚úÖ Sincroniza√ß√£o conclu√≠da",
        description: "Todas as a√ß√µes offline foram executadas com sucesso.",
      });
    } catch (error) {
      console.error('Erro na sincroniza√ß√£o:', error);
      toast({
        title: "‚ùå Erro na sincroniza√ß√£o",
        description: "Algumas a√ß√µes n√£o puderam ser sincronizadas. Tentaremos novamente.",
        variant: "destructive"
      });
    }
  };

  // Limpar a√ß√µes offline
  const clearOfflineActions = () => {
    setOfflineActions([]);
  };

  return {
    isOnline,
    reconnecting,
    lastOfflineTime,
    offlineActions: offlineActions.length,
    addOfflineAction,
    syncOfflineActions,
    clearOfflineActions
  };
}

/**
 * Componente de indicador de status offline premium
 * Separado em arquivo pr√≥prio para evitar problemas de JSX em hooks
 */
export function OfflineIndicator() {
  // Implementa√ß√£o ser√° movida para componente separado
  return null;
}

/**
 * Service Worker registration para funcionalidade PWA
 */
export function registerServiceWorker() {
  if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/sw.js')
        .then((registration) => {
          console.log('SW registrado com sucesso:', registration);
          
          // Verificar atualiza√ß√µes
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            if (newWorker) {
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  toast({
                    title: "üîÑ Atualiza√ß√£o dispon√≠vel",
                    description: "Uma nova vers√£o est√° dispon√≠vel. Recarregue a p√°gina para atualizar."
                  });
                }
              });
            }
          });
        })
        .catch((error) => {
          console.log('Erro no registro do SW:', error);
        });
    });
  }
}